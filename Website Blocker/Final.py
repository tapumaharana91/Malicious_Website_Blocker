import tkinter as tk
from tkinter import *
from tkinter.ttk import *
from tkinter import messagebox
import requests
import platform
import os
from base64 import b64decode
from PIL import Image, ImageTk
import io

def checksite():
    url = url_entry.get()
    if not url:
        messagebox.showwarning("Warning", "Please enter a website URL")
        return

    params = {
        'apikey': 'b08753e41ef61863bd3a2e667cc093b41ca12b3b6232be34dfa352a39a9fec55',
        'resource': url,
    }

    response = requests.get('https://www.virustotal.com/vtapi/v2/url/report', params=params)
    result = response.json()

    if result['response_code'] == 1:
        if result['positives'] > 0:
            messagebox.showwarning("Warning", "This website is malicious")
            block_button.config(state="normal")
        else:
            messagebox.showinfo("Info", "This website is safe")
            block_button.config(state="disabled")
    else:
        messagebox.showerror("Error", "An error occurred while checking the website")

def block_website():
    password = password_entry.get()
    if password == 'tapan':
        url = url_entry.get()
        system = platform.system()
        if system == 'Windows':
            hosts_path = r'C:\Windows\System32\drivers\etc\hosts'
        elif system == 'Linux':
            hosts_path = '/etc/hosts'

        
        if check_blocked(url, hosts_path):
            messagebox.showwarning("Warning", "This website is already blocked")
        else:
            with open(hosts_path, 'a') as hosts_file:
                hosts_file.write(f'\n127.0.0.1 {url}\n')

            print(f"Website '{url}' blocked successfully.")
            messagebox.showinfo("Info","Website blocked Successfully!")
    else:
        messagebox.showwarning("Warning", "Incorrect password")

def unblock_website():
    url = url_entry.get()
    password = password_entry.get()
    if password == 'tapan':
        system = platform.system()
        if system == 'Windows':
            hosts_path = r'C:\Windows\System32\drivers\etc\hosts'
        elif system == 'Linux':
            hosts_path = '/etc/hosts'

        
        with open(hosts_path, 'r') as hosts_file:
            lines = hosts_file.readlines()

        with open(hosts_path, 'w') as hosts_file:
            for line in lines:
                if not line.strip().endswith(url):
                    hosts_file.write(line)

        print(f"Website '{url}' unblocked successfully.")
        messagebox.showinfo("Info","Website Unblocked Successfully!")
    else:
        messagebox.showwarning("Warning", "Incorrect password")

def check_blocked(url, hosts_path):
    with open(hosts_path, 'r') as hosts_file:
        for line in hosts_file:
            if line.strip().endswith(url):
                return True
    return False

window = tk.Tk()
window.title("Website Security Check")

Label(window, text = 'Malicious Website Blocker', font =( 
'Verdana', 15)).pack(side = TOP, pady = 10) 

base64_image = """
iVBORw0KGgoAAAANSUhEUgAAAOEAAADhCAMAAAAJbSJIAAAAkFBMVEXbCBL////ZAADbAAreMDX53N7++vriUFTun6Hxu7zofH/iU1fvra7bAA7bAAjbAAD2zc798/PfOj7laWz75eb0wcL2z9D87u/53+D+9vbslpj31db1x8nyt7nndXjxsrTdJCrqiozuo6XkYGPgQ0fcFx7hSk7fNTrqiYvpgoTgQkbofX/jXGDdHybndnjkX2LmP+EkAAAOwklEQVR4nN2deWPqKhPGE+J2agh1r3HXo7U9tu/3/3Zv9pVlIGDiff6499Qaza8QGIaZwbL/67LavgHjegbhZLPdHUb3/Wx2eQz/3oaPy2z/5bt/lvPJE77dLOF868+mV4ICkVjIy/4Vvnj93o+2c6P3YIxwvvu6kRDMwxZb2AtRyfC+M4ZphPDj/D8c3DeXrcQZYuLLqG/iZrQTTg77a9ByULgy5nW/GOi+Ib2EK/cWtJ08XU6J0Nhdab0nnYSHEE+ZLlUAeTtobElthMu9DrwMcrbUdWN6CNfnnja8FLJ31tOQOgjnbwg5WvlCBRPnl44ppDnh5qK5+TIF486l+QTSlPD9ZoovEkHDpg9kM8KlWb6Y8daMsQlhf2ycL2Z8fLRCuNo/hS9m3KtbAcqEI/IsvoiR+E8mXP4gddtMRRj9KD6OSoSDNwPzn0gO2iuZACqEW++ZHTQXIYunEA5mLTRgLIxm8s0oTfjutNOAsYi3NU341VoDxnLQl1HC1TdqlS8U+ivnoZMi3D51DmSJkHdThP6T50CWMJKZ/iUIZ+330FRoZoBw/d2FHpoKfYOnDSjh/NolwOBhvELX/0DCJfHaZqrIIxudhIuOjDFFOQg2+YMI3Q4ChkPqTheh251BtCx00EN47ipggOjqIDx0FxCEKCTcdRkwQBQ+iyLCRbcBA0TRqlhAuOzkKFoURoJ5kU84b7AX+Cw5hG/dcAnXVtcsGZo8a61MOO2WLcoS+VQlnL0GYIB4USMcdWMYxY54LOAtidmE760DRkEoxPoJg4sI/24Q27HBJFy1PYw6iDzOm3gQmS/9GzfGAxPm1g2T8G+7D6GDjpWAjLnP84ORqSzhvd0+Sq4Ua2xwQuzZi+lHZRAuWwXEaE+/rY9P9n2xHkU64cBq07ONOeu+NyaiQ+jOKTphqzMh5gyModOWdR2huxiphO0uKLiA4c4J88I/UMJBqxOFcMV3YXUwTO2nNMJ9q/tn5UGm/7hcLuOSaT24sgYJaj+lELY6jjpWuR3ew6BpNAHeIM3BSCE8trlkqg6jke1YIWT3U+cKIYQZ3MiACOUWqYQf7EYciQknoGEGDe2BbtkHUvedUQntMXuwqdmnNULYMEOGtb9VcwWzcI2FTviHPSnWrKEqYR82zBgh9HD9Y+mENsd4q8bAVQmZ7W+ecIUsUnuMGIRD5m2SceWtFULostcEYTAJ1D2Dm4iwNpOf2A2BKtFhFUJorEVC+OGPtOkcjAAoHSc2+3+xoomBpD/tU8chZ6sBffMIt9DJPiHcpUlMWhTcXXojC5S/GH5dmiuVBkXz+lpl2i8TgsNlEkL2mKYkTHJC6huyYYQ3IKK/bEK4vWaIMLsbEeGK98XlJ7FE+ACb3Obb0IsVG9lO8lNGyLZqrOpwWiTkXlb5ECOE+XO4PU5j9UJEJ/lhekwJ+QNGaU4sEr7BV02mCGubLEv6bMHfti0ZNgXCtcTtmiKsbQYyZvx//MZAhQVlgVDGi2+IkJyAhJ98T1nRNioQHiX8a4YInR6MkDuUhp9zpBFKLe2VCHGc3hznPdPXaDW7mU4oDA8pTBg5oZR3Rp7QI4jMTrvtst9fbnenS/AjxZdAqp5rOmFP5IYojDU5oVRzyBISNK3mMff9T0rSDars51IJAcZlNu/khHJhM3KEBO2pmUv9WY2R/KsShhN9hRAwYuT+noyQveJqSuihN+bW13xfjYxH5aZehlP/T5kQMuiTW5VQNDqpE6JPbpbk8lj+03pH3rtDwUyvbCGWEkpG54EJMTqJ7vi3HLPD2H7INLiCvJ2ZTyslBHovZAk9SFz9royI7tx3AwNEMvM7IZSx2CQIPUE0T6JN+WHkJY2swREw6aicEMoaJzBCzwImRn6UDQA0ZsWpb+AZH+lOVEL4K7kZAyLEsBYMVVmzE4veuX2JnCTyWyKUsUnBhKKYuqIqn+SgcX0EXvzI9LTUNo0J57IWNIRQKrOltjglaLgr9tX5qCeZVJYsNmNC6UhuAGE+58JU2xUM65z4u/fNx2Zx3v8gIhtakMwXMaH0vj2AsL5e54vmIEwXIyTA82TTypKJNSa0ZLe1xYS1VYJQbD9YWLYGTc+S7ZB47qL/Sj+GYkJMpOt4Ma0xfPTd5Vrouqgp7kWWoCkYEhJW1wgQseyq1DyR8JRFimfEiPAuHZogJJR9CkOxln2qhOSeEd60E1Y860Bh+nCgTHjLCOXjZ4SEZxXCLzqCKmHsQg8JJdeG0ZeKCJWqAzF2K1QJ4zViSKgQDSwgxJSoD4AmugnfE8KzfAyUgJA8lAjtHtVuUSc8J4Sy84wlJjypEdInfWXCaMoKCeWHUhEhJGuOJvpQo044TAhll06WmFC6ekWskV7CaAEVEA7ANSoLX6qDcOCOr/ivX/AD0Nc4yoTYG0SECpOFFsKtF6yIMCKFWDR6sqMyYTRdWEnIiqREhIBSOW66oC3ErdMd7w0INxGhSsyziLAQ57s6nP7NQp3c4pq96JnJBibNvTT6S1tqib4iwtxo22clhAkiBd9LMWMlC1+mz8wNCHcRoasQ9CyaD/0csPhyvgFaXpKmnj9fMyFxI0L6xwouFRAmnrxqUHy+d1buOKlDgL6Kb0DoR4TyFwoJvTS2bFX+7NwgLz9x6V7FTfNzSN4iQpX0EZHl7SQg60obTviE9AViA8KZKcJ8P75kSzs/2XNYnqKS2AmGv6gxITPynXepgJCkg2npIS/6iEvu0aT3Mkb1ThKi1B1c7KYOLkyIxW6adlJGb2pAeIkI4fF6hUuFnqjU2swNMVyOGRxnvyBJujkrG6kB4SMilNvBTy4VehOzbc5zHI2ACakYq484X9JBvVX6TsZnqRMOI0LJ7d/sUi5hwSP8MY4c82/xC4NHllq+mIa/6GX2DyvpsQHh2FwvjaaiVJPNtp8+gp+k4GmcLLf52okZYtH4OTQx0liM3cPBZ/Bl5Jvym2CqYC1Tu0roXClb1VPiIORQN97YG/SNZwuVdEPIDimp+72XCF0XCwuh+gYv5+/cgHBvyi5N3lT3KZ5OQcMO7vXdYV7JwsZ2KSf/hH0pKBaDDIG1/wZDSGS6AuEpIqQ7uASXwuJpyBHk3Z8fubfQgHBkao2fySPU/OqyXE6phOjL1Nf4B1N+mlwY/Qp66mQsqkXV2E9jwNdWeqvDrYrfFwcgNCDsm/KXlt+bFDlaxmbbPH40J4lBcBR/RGN/6VqhwIBUjHDsnZknblES77zN4vX+ANILlH3eZB3vW/xo37coK15JpYReEsITr3ohHUh93yL0KUR7T/r3gEuKPeDzpPgvidO3HjEhJONRff/wlhAqGDVShM417KbBOnESXRIBr0gUa76m74lWvqzx/qH+PeCKPHJ3A8vJsXw3rC9D3lzfcjDx3bugwFXyZcqE6R4wODe2cK1cvgUm0UI/+Z9FoqpWmAAPMFPvpduEUD7oy1TeE+PLlAnntrF4Gq1qHk+j4It6CcL4JiNCRiyS8OKuE+ZxbfKVdF+CMN6nNRVfqlPKhHl8qYkYYY1SJCzGCBuJ89YnRcJSnLd0UfLEH7gzUUyprsRpJ5n2kgQTxIQStQaSq+PoiUn/KUqcPZLOiGQPM8mZkVtAAWv2a5fUQ5EW1VLJe8KQgCAjkpnWKnlPMn8dR1DY0KQk/IKV3DWJ/EOHGDlcGig4YiX/EB5j6pEmB0o2F3TYzypZWbIXYmiM+sqVEzSVD3intTxgoEuRXMHHZd4kJz12NeeK2DVaS4TVXG7YCoocwdlM8kYEt3a8LGJebk2qpgKZgs+RUnAzI3CqFKBQNaWmAsA1S9nyZEohOp5RJZcmdqXd7LOytsgrfwitb1St18fRSM0ABQ/Tv6JtvbxsQU4o8rghmSyR3R8V7eCmxJ5/t4VA80KNIb5tyioi3pa4J/nRawzxI2m5R0i0It7GOKNOFCOvKrnm9HQEgXiLhWJBm2K9Nl7YCeGX42hBnLstlUcpEvLKLXaPkNOGpXCdUt1Ejl3zSr20XD62RMhJtcTXXrf0eWX6B8vr13L90ik77AM7HRMT0CsHBpYJO3/KGkQVH0uljvDnKxzSxZdXOXGmQqiwWdo1VTMDq/W8VdYEnVItdrVKqBIg1SnVQpNrdfVVIoY7pHq1txph62d1NRLkbASgo6ejotSmopxRwjzGpftycB2HQtj+oXnKom2o0M4KepmTHauiLtNphCrhmF0QrteMZhB2/ZRjlujHtVEJlVKhWhejZAyd8BX7aRQQDCZ8RQucVYuDQWj/ezVE2TMswzzBtu9ZSvLnkHLSAbsojOTPkn0tjwYnOoRNaJ9eB5FXPppD+DqzIvd8LR6h3XsNRFI7FQNMuJKubNuGHH6MA5ewWme7k8KCAB8+YbBW7Doi//RgMWH35wxheIOIUCmH9okS1y8UEsrX+n6mAAUaxYTy0U3PE6TULYCwu60IquULIQwQOzmiwooVgwirp4h0QtBgcxihvaQdP9WqHGiwOZDQnlvdslEJOBYbSihxwMszRHrgSF4woW1fujOkyoRJShDafkfGG8AZUoqE9lb2EA0jqpVF00hor8AHBpsTmoIfQQXCMP643UUxhkeDKxK23FMle6gSoT24tDbgYHSh703oJbTtPy01IyEqSYEqhPZ61sLT6KCZfAOqEgZP4/XJXRWjq2LSoyJhGPf+zK5KiNQRZ1oI7VX9mFRjfGgmNwfqIbTtze0pjB4aShzCp5UwWDaaZ0RoqnhYhhZC2343y0jQdzO+5oRBO46NMRI0XopvwDhhfDSz/vnRCcYXHTnVOghte+L/aG5Ign586dP3qNJDGGgZHmShCc9D6NL08cukjTDQ4aYDkiD07YKzccXSSRj01sMDNXkmnfDsUVd9dqdJL2GgweKrp0QZHsV5/F1obL1Y2glDrXb7n/B4GahxjsMTVa29q3TgnkhGCEOttv7jiqJjYNmg2IlOiyXD+84IXShjhJHWy/PXuBcdBZucGIS89OCg8CXce9zP78bgIpklTLTqb3eu/zubXR7D7+FlNvu9j9zd+1zvkMLQUwhb1X+f8P/YCQdTL6cxaQAAAABJRU5ErkJggg==    
"""
image_data = b64decode(base64_image)
image = Image.open(io.BytesIO(image_data))
tk_image = ImageTk.PhotoImage(image)
label = tk.Label(window, image=tk_image)
label.pack()

icon_base64 = b'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'
icon_data = b64decode(icon_base64)
icon_image = Image.open(io.BytesIO(icon_data))
window.iconphoto(True, ImageTk.PhotoImage(icon_image))
x="-----------------------------------"
y="                                   "
url_label = tk.Label(window, text="Enter website URL:",background="black",foreground="red")
url_label.pack()

url_entry = tk.Entry(window, width=50)
url_entry.pack()

check_button = tk.Button(window, text="Check Website", command=checksite,)
check_button.pack()

xline=tk.Label(window,text=x)
xline.pack()

password_label = tk.Label(window, text="Enter password:",background="black",foreground="red")
password_label.pack()
password_entry = tk.Entry(window, width=50, show=" ")
password_entry.pack()

block_button = tk.Button(window, text="Block Website", command=block_website)
block_button.pack()
yline=tk.Label(window,text=y)
yline.pack()
unblock_button = tk.Button(window, text="Unblock Website", command=unblock_website)
unblock_button.pack()

window.mainloop()
